import os
import aiohttp
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

class_translation = {
    'glioma': '–ì–ª–∏–æ–º–∞',
    'meningioma': '–ú–µ–Ω–∏–Ω–≥–∏–æ–º–∞',
    'pituitary': '–ê–¥–µ–Ω–æ–º–∞ –≥–∏–ø–æ—Ñ–∏–∑–∞',
    'no tumor': '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ–ø—É—Ö–æ–ª–∏',
    'Pneumonia': '–ü–Ω–µ–≤–º–æ–Ω–∏—è',
    'COVID-19': 'COVID-19',
    'Normal': '–ù–æ—Ä–º–∞–ª—å–Ω–æ'
}


async def handle_image_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Get the photo
    photo = update.message.photo[-1]  # Get the highest resolution photo
    file = await context.bot.get_file(photo.file_id)

    # Download the image as a byte array
    image_data = await file.download_as_bytearray()

    # Determine the analysis type based on context
    analysis_type = context.user_data.get('analysis_type', 'ecg')  # Default to ECG if not set

    # Define the prediction endpoint based on analysis type
    endpoint = {
        'ecg': 'http://91.147.92.32:9999/predict/ecg',
        'mri': 'http://91.147.92.32:9999/predict/mri',
        'xray': 'http://91.147.92.32:9999/predict/xray',
    }.get(analysis_type)

    # Send the image to the prediction endpoint
    if endpoint:
        async with aiohttp.ClientSession() as session:
            form_data = aiohttp.FormData()
            form_data.add_field('file', image_data, filename='image.jpg')

            async with session.post(endpoint, data=form_data) as response:
                if response.status == 200:
                    json_response = await response.json()
                    print(json_response)

                    # Handle ECG results
                    if analysis_type == 'ecg':
                        predicted_description = json_response.get('predicted_class_description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
                        confidence = json_response.get('confidence', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

                        readable_message = (
                            f"üîç *–í–∞—à –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤!*\n\n"
                            f"–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n"
                            f"- –ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏: *{predicted_description}*.\n"
                            f"- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç *{confidence}*.\n\n"
                            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å."
                        )

                    # Handle MRI-specific result with class confidences
                    elif analysis_type == 'mri':
                        predicted_class = json_response.get('predicted_class', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        confidence = json_response.get('confidence', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        class_confidences = json_response.get('class_confidences', {})

                        # Translate classes into Russian terms
                        translated_predicted_class = class_translation.get(predicted_class, predicted_class)
                        translated_confidences = {
                            class_translation.get(cls, cls): conf for cls, conf in class_confidences.items()
                        }

                        # Construct a message showing all the class confidences
                        class_confidences_str = '\n'.join(
                            [f"- {cls}: {conf}%" for cls, conf in translated_confidences.items()])

                        readable_message = (
                            f"üîç *–í–∞—à –∞–Ω–∞–ª–∏–∑ –ú–†–¢ –≥–æ—Ç–æ–≤!*\n\n"
                            f"–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n"
                            f"- –ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏: *{translated_predicted_class}*.\n"
                            f"- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç *{confidence}%*.\n\n"
                            f"–î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:\n"
                            f"{class_confidences_str}\n\n"
                            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å."
                        )

                    # Handle X-ray specific result
                    elif analysis_type == 'xray':
                        predicted_class = json_response.get('predicted_class', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        confidence = json_response.get('confidence', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        class_confidences = json_response.get('class_confidences', {})

                        # Translate classes into Russian terms
                        translated_predicted_class = class_translation.get(predicted_class, predicted_class)
                        translated_confidences = {
                            class_translation.get(cls, cls): conf for cls, conf in class_confidences.items()
                        }

                        # Construct a message showing all the class confidences
                        class_confidences_str = '\n'.join(
                            [f"- {cls}: {conf}%" for cls, conf in translated_confidences.items()])

                        readable_message = (
                            f"üîç *–í–∞—à –∞–Ω–∞–ª–∏–∑ –†–µ–Ω—Ç–≥–µ–Ω–∞ –≥–æ—Ç–æ–≤!*\n\n"
                            f"–ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n"
                            f"- –ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏: *{translated_predicted_class}*.\n"
                            f"- –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç *{confidence}%*.\n\n"
                            f"–î—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:\n"
                            f"{class_confidences_str}\n\n"
                            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å."
                        )

                    # Send the response message
                    await update.message.reply_text(readable_message, parse_mode='Markdown')

                else:
                    # Handle non-200 response
                    await update.message.reply_text(
                        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        # Handle missing analysis type case
        await update.message.reply_text("–ê–Ω–∞–ª–∏–∑ –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∞–Ω–∞–ª–∏–∑–æ–≤.")


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END


async def ecg(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['analysis_type'] = 'ecg'  # Set the analysis type to ECG
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –≠–ö–ì (–∂–∫–≥). –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ç–∫–∏: üè•"
    )
    photo_path = "example.jpeg"  # Replace with the actual path to your example photo
    await update.message.reply_photo(open(photo_path, 'rb'))


async def mri(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['analysis_type'] = 'mri'  # Set the analysis type to MRI
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –ú–†–¢. –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ç–∫–∏: üè•"
    )
    photo_path = "example_mri.jpg"  # Replace with the actual path to your example photo
    await update.message.reply_photo(open(photo_path, 'rb'))


async def xray(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data['analysis_type'] = 'xray'  # Set the analysis type to X-Ray
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –•–†–ï–ô –ª–µ–≥–∫–∏—Ö. –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ç–∫–∏: üè•"
    )
    photo_path = "example_xray.jpeg"  # Replace with the actual path to your example photo
    await update.message.reply_photo(open(photo_path, 'rb'))

